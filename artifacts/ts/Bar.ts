/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as BarContractJson } from "../Bar.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace BarTypes {
  export type Fields = {
    value: bigint;
    otherVal: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getValue: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOther: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getValue: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getOther: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<BarInstance, BarTypes.Fields> {
  encodeFields(fields: BarTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as BarTypes.Fields;
  }

  at(address: string): BarInstance {
    return new BarInstance(address);
  }

  tests = {
    getValue: async (
      params: Omit<
        TestContractParamsWithoutMaps<BarTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getValue", params, getContractByCodeHash);
    },
    getOther: async (
      params: Omit<
        TestContractParamsWithoutMaps<BarTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getOther", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Bar = new Factory(
  Contract.fromJson(
    BarContractJson,
    "",
    "e08e902ff4d896e8d38bd82947f2ab56793946006013376046b1b9c0a4df42db",
    []
  )
);

// Use this class to interact with the blockchain
export class BarInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<BarTypes.State> {
    return fetchContractState(Bar, this);
  }

  methods = {
    getValue: async (
      params?: BarTypes.CallMethodParams<"getValue">
    ): Promise<BarTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        Bar,
        this,
        "getValue",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOther: async (
      params?: BarTypes.CallMethodParams<"getOther">
    ): Promise<BarTypes.CallMethodResult<"getOther">> => {
      return callMethod(
        Bar,
        this,
        "getOther",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    getValue: async (
      params: BarTypes.SignExecuteMethodParams<"getValue">
    ): Promise<BarTypes.SignExecuteMethodResult<"getValue">> => {
      return signExecuteMethod(Bar, this, "getValue", params);
    },
    getOther: async (
      params: BarTypes.SignExecuteMethodParams<"getOther">
    ): Promise<BarTypes.SignExecuteMethodResult<"getOther">> => {
      return signExecuteMethod(Bar, this, "getOther", params);
    },
  };

  async multicall<Calls extends BarTypes.MultiCallParams>(
    calls: Calls
  ): Promise<BarTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Bar,
      this,
      calls,
      getContractByCodeHash
    )) as BarTypes.MultiCallResults<Calls>;
  }
}
